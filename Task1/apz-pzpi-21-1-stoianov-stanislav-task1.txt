1 БІЗНЕС-ВИМОГИ

1.1 Передумови

Хоча ми живемо в епоху інформаційних технологій, де Інтернет надає доступ до безлічі даних, традиційні бібліотеки залишаються актуальними. Їх унікальна та спеціалізована інформація, яка не завжди доступна в мережі, разом із соціальними та культурними функціями, визначає їх важливість у сучасному суспільстві.
Однак управління бібліотеками, що переважно виконується вручну, включає в себе численні рутинні завдання, такі як каталогізація матеріалів та контроль за відвідуванням. Це призводить до незручностей як для персоналу, так і для відвідувачів. Наприклад, процес видачі та повернення книг може займати багато часу, а також інформація про наявність матеріалів не завжди легко доступна.
Вирішення цих проблем може бути досягнуте за допомогою програмного забезпечення для управління бібліотекою. Автоматизація рутинних процесів та поліпшення обслуговування завдяки програмним рішенням дозволять зробити роботу бібліотек більш ефективною та зекономити час як для персоналу, так і для відвідувачів.

1.2 Бізнес-можливості

На сьогоднішній день існує ряд програмних продуктів, спрямованих на вирішення проблем управління бібліотекою, що є аналогами запропонованої системи.
Libero – це хмарне рішення для управління бібліотекою, яке відзначається простим інтерфейсом та гнучкістю налаштувань під різні типи бібліотек. Його мобільна версія, Libero GO, пропонує спрощений процес видачі та повернення матеріалів, але все ж потребує втручання бібліотекаря. Однак система не надає можливості відслідковувати заборгованості відвідувачів або надавати інформацію про наявні матеріали в бібліотеці.
Infiniti Management – цей пакет програмного забезпечення спрямований на управління бібліотекою в шкільних установах. Він надає інтуїтивно зрозумілий пошук матеріалів та сповіщення про заборгованості по електронній пошті. Однак через специфіку шкільних бібліотек, система має обмежену масштабованість і погано підходить для інших типів бібліотек.
CodeAchi – це одна з найпопулярніших систем управління бібліотекою. Вона відома своєю персоналізацією, яка дозволяє користувачам налаштовувати процес каталогізації. Система також має потужну пошукову систему та автоматичні електронні повідомлення про прострочення. Проте відсутній мобільний застосунок для зручного доступу.
Запропонована система орієнтована на малі та середні бібліотеки в Європі, з можливістю розширення на глобальний ринок. Модель монетизації передбачає щомісячну підписку, яка покриватиме витрати на обслуговування, підтримку та оновлення програмного забезпечення.

2 КОНЦЕПЦІЯ РІШЕННЯ

2.1 Окреслення концепції

Запропонований програмний продукт має за мету оптимізувати рутинні процеси в бібліотеці шляхом автоматизації каталогізації бібліотечних матеріалів та обслуговування користувачів. Основні цілі продукту включають підвищення ефективності роботи бібліотекарів, спрощення процесів, які займають багато часу, та покращення якості обслуговування для відвідувачів бібліотеки.
Автоматизація роботи бібліотеки здійснюватиметься за допомогою єдиної бази даних, де зберігатиметься інформація про бібліотечні матеріали та відвідувачів. Ця база даних дозволить серверу відстежувати наявність книг у бібліотеці, терміни повернення книг відвідувачами та виконувати операції на основі цих даних, такі як оновлення електронного каталогу чи надсилання повідомлень про заборгованість відвідувачам.
Клієнтський інтерфейс, розроблений для взаємодії працівників бібліотеки з сервером та базою даних, буде зручним і функціональним. Він дозволить працівникам вести облік нових матеріалів та відвідувачів, вести звітність та звертатися до служби підтримки у разі потреби.
Отже, цей програмний продукт спрямований на значне полегшення роботи бібліотечного персоналу та поліпшення обслуговування для відвідувачів.
Для відвідувачів бібліотеки планується створення мобільного застосунку, який надаватиме функції електронного каталогу для пошуку матеріалів та перевірки їх наявності, а також для перегляду статусу власних матеріалів та терміну їх повернення. У разі прострочення повернення матеріалів відвідувачеві надходитиме повідомлення через застосунок.
Система також включає в себе сканер штрих-кодів для автоматизації видачі та повернення книг. Відвідувачеві необхідно спершу відсканувати код зі свого мобільного застосунку, а потім він зможе відсканувати штрих-коди книг, які він планує взяти. Якщо ці книги зареєстровані в базі даних як наявні, вони зараховуватимуться як видані від

2.2 Головна функціональність

Функціональність для ролі бібліотекаря:
MF-1: Додавання, редагування та видалення інформації щодо бібліотечних матеріалів.
MF-2: Реєстрація та видалення відвідувачів у системі.
MF-3: Перегляд інформації про матеріали та відвідувачів бібліотеки.
MF-4: Генерація та друк штрих-кодів для бібліотечного матеріалу.
MF-5: Ведення звітності бібліотеки.

Функціональність для ролі відвідувача:
MF-6: Перегляд електронного каталогу бібліотеки.
MF-7: Отримання персональних рекомендацій на основі виданих книг.
MF-8: Самостійна видача та повернення бібліотечного матеріалу.
MF-9: Отримання повідомлень про заборгованість.

Функціональність для ролі служби підтримки:
MF-10: Надання технічної підтримки користувачам.

3 РАМКИ ТА ОБМЕЖЕННЯ

3.1 Рамки первинного випуску
Перший випуск програмного продукту буде включати наступні функції:
MF-1: Додавання, редагування та видалення інформації про бібліотечні матеріали.
Працівники бібліотеки зможуть додавати, змінювати та видаляти інформацію про нові та існуючі матеріали.
MF-2: Реєстрація та видалення відвідувачів в системі.
Працівники бібліотеки зможуть реєструвати нових відвідувачів та видаляти їхні дані, якщо вони не користуються послугами бібліотеки.
MF-3: Перегляд інформації про матеріали та відвідувачів бібліотеки.
Працівники бібліотеки зможуть переглядати інформацію про матеріали в бібліотеці та стан відвідувачів, включаючи їхні заборгованості.
MF-4: Друк штрих-кодів для бібліотечного матеріалу.
Працівники бібліотеки зможуть надрукувати штрих-коди для книг для самообслуговування відвідувачів.
MF-6: Перегляд електронного каталогу бібліотеки.
Відвідувачі зможуть переглядати електронний каталог книг, доступних у бібліотеці.
MF-8: Самостійна видача і повернення бібліотечного матеріалу.
Відвідувачі зможуть самостійно брати та повертати книги за допомогою сканера штрих-кодів.
MF-9: Отримання повідомлень про заборгованість.
Відвідувачі отримуватимуть повідомлення про заборгованість, якщо вони прострочують термін повернення книг.

3.2 Рамки наступних випусків

У наступних версіях програмного продукту планується додати наступну функціональність:
ГФ-5: Ведення звітності бібліотеки
Система матиме можливість автоматично вести звітність за різними критеріями, такими як кількість нових матеріалів, кількість відвідувачів, кількість виданих книг і т. д. Працівники бібліотеки зможуть експортувати та роздрукувати ці звіти.
ГФ-7: Персональні рекомендації на основі виданих книг
Відвідувачі бібліотеки матимуть можливість отримувати персоналізовані рекомендації щодо книг, які їм можуть сподобатися, на основі їхніх попередніх виборів. Ці рекомендації будуть формуватися на основі різних критеріїв, таких як жанр, автор, тематика тощо.
ГФ-10: Надання технічної підтримки користувачам
Система буде мати службу підтримки, яка надаватиме технічну допомогу користувачам через клієнтський інтерфейс. Користувачі матимуть можливість звертатися за допомогою в разі виникнення технічних питань чи проблем з використанням системи.

4 БІЗНЕС-КОНТЕКСТ

4.3 Робоче середовище
Програмна система буде використовуватися користувачами з різних країн, тому надзвичайно важливо забезпечити безперебійний доступ. Це буде забезпечено за допомогою хмарних сервісів Fly.io. В робочому середовищі основні компоненти представлені наступним чином:
- Серверна частина буде розроблена з використанням мови програмування Rust, що забезпечить безпеку даних та низьке використання програмних ресурсів.
- База даних: У ролі бази даних буде використано СУБД PostgreSQL. Це гарантує надійне зберігання даних і швидкий доступ до них.
- Користувацький інтерфейс: Для створення клієнтської частини проекту буде використана мова програмування Javascript з використанням фреймворку Solid.
- Мобільний застосунок буде створено для платформи iOS за допомогою використання мови програмування Swift.
- Пристрій IoT: Для реалізації IoT-частини продукту буде використано платформу Arduino з використанням мови програмування Rust у середовищі no_std, для можливості виконання програми без операційної системи.
- Забезпечення безпеки: Планується використання протоколу HTTPS для забезпечення шифрування даних під час їх передачі. Також передбачено впровадження сучасних методів аутентифікації та авторизації для захисту від несанкціонованого доступу.
- Доступність та надійність: Система буде розміщена на сервері Fly.io з можливістю створення резервних копій та аварійного відновлення. Застосунок буде доступний для користувачів цілодобово без перерв у роботі.
