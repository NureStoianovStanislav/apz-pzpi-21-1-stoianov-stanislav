1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
Розроблений програмний продукт розрахований на один тип акторів – адміністратора системи, оскільки проєкт являє собою панель адміністрування у програмній системі.
Необхідними потребами адміністратора є: можливість перегляду бібліотек, можливість їх редагування, можливість видалення існуючих бібліотек, можливість зміни власників бібліотек, можливість додавання нових бібліотек, можливість перегляду списку користувачів, яким можна передати володіння бібліотекою, можливість створення резервних копій бази даних та можливість завантаження резервних копій баз даних. Діаграма прецедентів (див. додаток А.1) детально описує взаємодію користувача з системою.
Розроблений програмний продукт має підтримку інтернаціоналізації і надає візуальний інтерфейс англійською та українською мовами.

2 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ
Для створення клієнської частини програмної системи було обрано мову програмування JavaScript. Цю мову програмування у стандарті EcmaScript 6 можуть інтерпретувати усі сучасні веб браузери.
Також було обрано бібліотеку React для створення репрезентації інтерфейсу програми у текстовому форматі HTML з використання даних зі структур даних у JavaScript програмі.
Було використано бібліотеку TailwindCSS для застосування стилів до елементів інтерфейсу.
Для можливості мати більше однієї сторінки на сайті використано ReactRouter, що надає засоби для створення динамічної навігації у браузері.
Статичні дані та бандлінг сторінок в один JavaScript файл було реалізовано за допомогою інструменту Vite.
Для реалізації інтернаціоналізації та виконання запитів на сервер програмної системи було використано програмний інтерфейс веб браузеру.
Для візуалізації програмних залежностей було розроблено діаграму пакетів.
Рисунок 1 – Діаграма пакетів програмного застосунку
 
При розробці програмного застосунку було використано компонентну архітектуру, що передбачає своє використання із сучасними фреймворками для створення візуальних інтерфейсів. Для візуалізації залежностей між компонентами застосунку було створено діаграму компонентів (див додат. А.2).
Використання програмного застосунку починається з домашньої сторінки, на якій відображено список всіх активних бібліотек. З цієї сторінки користувач також може перейти на сторінку входу в обліковий запис, сторінку створення облікових записів, сторінку перегляду та редагування обраної бібліотеки та на сторінку створення резервних копій бази даних програмної системи. На усіх сторінках присутні посилання для переходу на інші сторінки та кнопки вибору мови інтерфейсу, англійської чи української.
Для доступу до сторінок редагування даних та створення резервних копій користувач має бути аутентифікованим та авторизованим як адміністратор системи. Після вводу своїх даних для входу в обліковий запис та відправлення запиту на сервер браузер обробляє відповідь та встановлює дані Cookie, котрі будуть надсилатися з подальшими запитами для аутентифікації користувача. В разі якщо користувач не є адміністратором буде відображене повідомлення про це та перенаправлено на сторінку для входу в обліковий запис.
Для кращого уявлення про взаємодію користувачів з клієнтською частиною системи було розроблено діаграму взаємодії (див. додаток А.3).
У процесі проєктування застосунку системи було визначено основні технології та архітектурні рішення для подальшої розробки.
У додатку Б наведено приклади коду клієнтської частини програмної системи.

ВИСНОВКИ
Під час виконання практичного завдання було отримано досвід у проєктуванні клієнтської частини програмної системи. Результатом роботи є програмна реалізація фронтенду, розроблена з використанням JavaScript та React. Під час розробки було дотримано кращих практик для підтримки програмних рішень на обраній мові програмування.
