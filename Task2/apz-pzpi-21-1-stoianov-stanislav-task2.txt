1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
Розроблена система передбачає 3 види акторів: адміністратор системи, власник бібліотеки та клієнт бібліотеки.
Основними потребами адміністратора системи є:
- додавання нових бібліотек, вказуючи прямих клієнтів системи, тобто власників бібліотек;
- перегляд існуючих бібліотек для отримання актуальних даних щодо стану бібліотек та їх економічної політики, вказаної в системі;
- оновлення даних бібліотек в разі зміни адресу, імені тощо;
- видалення бібліотек зі списку активних бібліотек з інтеграцією
програмної системи;
- доступ до функціоналу, передбаченого для клієнтів бібліотек.
Основними потребами власників бібліотек є:
- перегляд даних про свої бібліотеки;
- оновлення даних бібліотек, що визначають вартість послуг для клієнтів;
- додавання книг у список доступних у бібліотеці;
- перегляд книг у бібліотеці та позичених книг;
- оновлення даних книжок, що знаходяться в їх бібліотеках;
- видалення книжок зі списку доступних;
- відмічання позичення клієнтами книжок;
- відмічання повернення книжок до бібліотеки та підрахунок
вартості для сплати клієнтом;
- перегляд списку клієнтів, що наразі мають позичені книги та перегляд боржників, що не повернули книги до зазначеної дати.
Основними потребами клієнтів бібліотек є:
- перегляд списку бібліотек для їх пошуку;
- перегляд доступних книг у бібліотеках;
- пошук книг та їх рекомендації.
Діаграма прецедентів (див. додаток А) детально описує взаємодію кожного актора з програмною системою. Створення діаграми дозволило чітко визначити функціональні потреби при розробці системи.

2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ
Для проєктування бази даних було розроблено ER-модель даних (див. додаток. Б). Вона складається з 4 таблиць: користувачі, бібліотеки, книги, позичення.
У базі даних наявні наступні зв’язки між сутностями:
- користувачі мають зв’язок один до багатьох з бібліотеками, котрий
описує, якими бібліотеками володіє користувач, за вимогами системи було визначено, що адмініструвати бібліотекою має змогу тільки один користувач в даний момент часу;
- бібліотеки та книжки мають зв’язок один до багатьох, оскільки за визначеними обмеженнями системи кожна книга має свій ідентифікаційний номер, бо у бібліотеці можуть бути дублікати книг, що повинні бути розглянуто як окремі сутності;
- книги мають зв’язок один до багатьох із сутністю позичення, оскільки клієнти можуть позичати та повертати різні книжки в один або в різний час незалежно одна від одної, кожну книгу можна позичити повторно після повернення тим самим або іншим клієнтом;
- користувачі мають зв’язок один до багатьох із сутністю позичення, оскільки позичення окремої книги виконує завжди тільки один користувач одночасно і користувач може позичати книги в незалежності від інших позичень.

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ
Для розробки серверної частини програмної системи було обрано мову програмування Rust та використано технології Tokio та Axum для створення веб серверу з можливістю оброблювати велику кількість запитів одночасно та асинхронно. В якості системи управління базами даних було обрано PostgreSQL, до якого з серверного застосунка здійснюється доступ за допомогою технології SQLx, яка надає зручний інтерфейс для обробки SQL запитів, використовуючи програмний інтерфейс обраної мови програмування. Для візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 2).
Рисунок 2 – Діаграма розгортання програмної системи
 
Для тестування серверного застосунку було використано HTTP клієнт
Insomnia, що підтримує увесь функціонал поточних версій протоколу та дозволяє надсилати та зберігати запити через зручний інтерфейс. Також було використано захищену версію протоколу HTTPS, що забезпечує безпеку передачі даних.
Для захисту персональних даних клієнтів та захисту даних, що є важливими для збереження критичної для бізнесу інформації було використано технології Json Web Tokens для аутентифікації користувачів через непідробні токени, блочний шифр Advanced Encryption Standard для шифрування порядкових ідентифікаторів сутностей у базі даних, було використано бібліотеки secrecy та zeroize для видалення важливих даних з пам’яті для обходу можливих оптимізацій з боку компілятора.
Розроблений серверний застосунок був побудованих з використанням концепцій Clean Architecture та Domain Driven Design. Застосунок складається з шарів презентації, бізнес логіки та доступу до сторонніх сервісів або використання програмного інтерфейсу бібліотек. Кожен з перерахованих шарів є залежністю для попередніх
Архітектура застосунку було візуалізовано у діаграмі пакетів (див. додаток В). В додатку Г наведено фрагменти коду застосунку.

4 СПЕЦИФІКАЦІЯ REST
Серверний застосунок було розроблено з врахуванням методології REST. У ньому передбачено 19 вхідних точок для програмного клієнта застосунку.
Специфікація REST застосунку наведена у таблиці 1.
Таблиця 1 – Специфікація REST системи «Libmarse»
Отже, за допомогою таблиці REST-специфікації було визначено необхідні обробники запитів для виконання функціональних вимог від серверного застосунку.

ВИСНОВКИ
Під час виконання лабораторної роботи було отримано навички у створенні серверної частини програмної системи, розробці сценаріїв використання, створенні діаграм розгортання та пакетів, а також у проєктуванні бази даних. Було виконано програмну реалізацію серверної частини програмної системи «Libmarse» мовою програмування Rust з дотриманням вимог до чистого коду.
