1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
IoT-пристрій розробленої системи відповідає за запозичення та повернення книг до бібліотеки. Пристрій передбачає своє налаштування працівниками бібліотеки та відповідає за обробку даних, повʼязану з врахуванням вартості запозичень та сроку для запозичення книг клієнтами.
Взаємодія пристрою з сервером представлена на діаграмі прецедентів (див. рис. 1).
Рисунок 1 — UML діаграма прецедентів системи

2 ОПИС РОЗРОБКИ ЗАСТОСУНКУ ДЛЯ ВБУДОВАНИХ СИСТЕМ
При розробці системи було прийнято рішення використовувати архітектурну модель, яка поєднує монолітну та модульну архітектури, щоб досягти балансу між простотою та розширюваністю. Було створено статичну бібліотеку, здатну компілюватись навіть для середовищ без операційної системи. Статична бібліотека дозволяє використовувати логіку програми з різними програмними інтерфейсами.
Важливим аспектом при створенні програмного застосунку було використання мінімальної кількості пам'яті та бути здатним працювати лише зі стеком пам’яті, для підтримки роботи на будь-яких смарт пристроях.
Результатом цих архітектурних рішень стала UML діаграма діяльності, яка ілюструє структуру та взаємодію різних компонентів системи (див. додаток A.2).

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ
3.1 Опис використаних технологій
Під час розробки вбудованої частини системи було використано інструменти мови програмування Rust.
Для надсилання HTTP запитів було використано бібліотеку reqwest. Для обробки помилок – anyhow. Для роботи з часом, враховуючи часові пояса було використано бібліотеку chrono. Для серіалізації даних перед відправкою на сервер використано serde.
Для демонстрації структури використання пакетів усередині системи було створено UML-діаграму пакетів (див. додаток A.3). Ця діаграма ілюструє взаємозв'язки та інтерфейси між різними компонентами розробленого програмного продукту забезпечення, що сприяє зрозумінню його структури та організації.
3.2 Опис результатів розробки частини проекту для вбудованих систем
Результатом роботи став програмний застосунок для вбудованих систем, що може бути запущений на широкому спектрі різних пристроїв.
Під час запуску додатку, спершу відбувається ініціалізація налаштувань та перевірка їх значень. У конфігурації можна редагувати локацію сервера для обробки даних. Програма чекає вводу даних від користувача з запитом наступної команди. В залежності від обраної команди пристрій запитує користувача усі необхідні дані для подальшої їх обробки та надсилання на сервер.
При налаштуванні системи пристрій питає у користувача нову локацію сервера для ЇЇ подальшого збереження та використання.
При запозиченні книги пристрій потребує ідентифікатор користувача та ідентифікатор книги. Ідентифікатор користувача може буде отриманим через 5

картку клієнта шляхом її сканування. Сканування штрих-коду книги з бібліотеки надає ідентифікатор книги. Пристрій визначає поточну дату та срок для запозичення за рахунок визначення рівня попиту на книгу.
При поверненні книги пристрій сканує ідентифікатор (штрих код) книги та використовує його для надсилання актуальних даних на сервер.
Для демонстрації складної структури проекту була розроблена UML діаграма взаємодії (див. додаток А.1).

4 ОПИС РЕЗУЛЬТАТІВ ТЕСТУВАННЯ ЧАСТИНИ ПРОЕКТУ ДЛЯ ВБУДОВАНИХ СИСТЕМ
Зазначений смарт пристрій, з точки зору структури, є доволі простим HTTP клієнтом, котрий оброблює дані як з серверу, так і дані, які ввів користувач.
Для перевірки правильності роботи системи було проведено тестування. Тестування виконувалося вручну, з використання програмних підходів. Тестування було виконано, збудувавши програму під операційну систему MacOS та архітектуру процесора aarch64. Для демонстрації роботи було розроблено консольну програму на мові програмування Rust. При тестуванні було використано дані про завчасно створені книги та акаунти користувачів. Було змодельовано повний робочий процес бібліотеки з налаштуваннями системи, запозиченням та поверненням книг.


ВИСНОВКИ
Результатом виконаної лабораторної роботи є розробка програмного забезпечення для вбудованих систем.
Пристрій входить у склад програмної системи та взаємодіє з нею. Реалізоване програмне забезпечення розширює функціональність, що відповідає концепції вбудованих систем, і забезпечує ефективну взаємодію з іншими компонентами системи.
